{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the FRC Programming Guide","text":"<p>This guide does not include how to program in java</p> <p>It also does not cover installation of the WPILib toolkit</p>"},{"location":"Basic-FRC-Programming/1/","title":"First Steps with WPILib","text":""},{"location":"Basic-FRC-Programming/2/","title":"Command Based Programming Theory","text":"<p>Command-based programming is a design pattern widely used in robotics and other event-driven systems to structure code in a modular, maintainable, and reusable way. At its core, it involves defining commands\u2014single, reusable units of work\u2014that interact with subsystems\u2014the robot's mechanical and electrical components. This separation of concerns simplifies complex robotic control.</p>"},{"location":"Basic-FRC-Programming/2/#the-command-lifecycle","title":"The Command Lifecycle","text":"<p>A Command represents a single, autonomous task that the robot can perform. Every command follows a well-defined lifecycle managed by the Command Scheduler.</p> <p></p>"},{"location":"Basic-FRC-Programming/2/#1-initialize","title":"1. initialize()","text":"<ul> <li>Called once when the command is first scheduled.  </li> <li>Used to set up the command's initial state, such as resetting encoders, setting initial motor speeds, or preparing internal variables.</li> </ul>"},{"location":"Basic-FRC-Programming/2/#2-execute","title":"2. execute()","text":"<ul> <li>Called repeatedly (typically every robot cycle, e.g., every 20ms) while the command is running.  </li> <li>Contains the main logic of the command, such as driving motors, adjusting pneumatics, or performing calculations. This method should return quickly.</li> </ul>"},{"location":"Basic-FRC-Programming/2/#3-isfinished","title":"3. isFinished()","text":"<ul> <li>Called repeatedly to determine if the command has completed its task.  </li> <li>Returns a boolean value. When it returns true, the command signals the scheduler that it is finished and should be stopped. Examples include checking if a setpoint has been reached, a timer has expired, or a button has been released.</li> </ul>"},{"location":"Basic-FRC-Programming/2/#4-endboolean-interrupted","title":"4. end(boolean interrupted)","text":"<ul> <li>Called once when the command stops, either because isFinished() returned true (finished) or because it was cancelled/interrupted by another command (interrupted).</li> <li>Used to clean up, such as setting motors to zero, disabling actuators, or stopping any active sensors. The interrupted boolean can be used to perform different cleanup based on how the command ended.</li> </ul>"},{"location":"Basic-FRC-Programming/2/#the-command-scheduler","title":"The Command Scheduler","text":"<p>The Command Scheduler is the heart of the command-based system. It acts as a central manager responsible for tracking, running, and terminating all active commands.</p> <p></p>"},{"location":"Basic-FRC-Programming/2/#responsibilities","title":"Responsibilities","text":"<ul> <li>Scheduling: When a command is triggered (e.g., by a button press or another command), the scheduler places it on a list of active commands.  </li> <li>Execution: In the main robot loop, the scheduler iterates through all active commands and calls their respective execute() and isFinished() methods.  </li> <li>Resource Management: It enforces subsystem requirements. If a new command requires a subsystem already in use by an active command, the scheduler will automatically interrupt and stop the currently running command before starting the new one. This prevents conflicting control instructions.  </li> <li>Termination: When a command's isFinished() returns true or it's interrupted, the scheduler calls its end() method and removes it from the active list.</li> </ul>"},{"location":"Basic-FRC-Programming/2/#default-commands","title":"Default Commands","text":"<p>A Default Command is a special type of command associated with a Subsystem.</p> <p></p>"},{"location":"Basic-FRC-Programming/2/#behavior","title":"Behavior","text":"<ul> <li>Always Running (Unless Interrupted): A default command is automatically scheduled by the scheduler to run whenever no other command is currently running and actively requiring its associated subsystem.  </li> <li>Low Priority: It is the lowest priority command for a subsystem and will be automatically interrupted and stopped as soon as any other command requiring that subsystem is scheduled.  </li> <li>Restoration: Once the higher-priority command finishes or is interrupted, the scheduler will automatically restart the default command.</li> </ul>"},{"location":"Basic-FRC-Programming/2/#common-uses","title":"Common Uses","text":"<ul> <li>Idling Behavior: Maintaining a safe or known state, such as holding a mechanism in a specific position using a PID loop.  </li> <li>Manual Control: Assigning continuous joystick or controller input to a subsystem (e.g., joystick control for a drive train).</li> </ul>"},{"location":"Basic-FRC-Programming/3/","title":"Basic Subsystems and Commands","text":""},{"location":"Basic-FRC-Programming/4/","title":"The Fundamentals of Controls","text":""},{"location":"Basic-FRC-Programming/5/","title":"The TalonFX Motor Controller","text":""},{"location":"Basic-FRC-Programming/6/","title":"Advanced Commands and Command Groups","text":""},{"location":"Basic-FRC-Programming/7/","title":"Basic Logging and Visualization","text":""}]}